from typing import Any, Callable, List
from abc import ABC

__all__ = ['GET', 'SET', 'DEL', 'Getter', 'Setter', 'Deleter', 'property_access_mod_class']

class _PropertyAccessModifierBase(ABC):
    def __init__(self, obj: Any) -> None:
        self.is_setter  = isinstance(obj, Setter)  or isinstance(self, Setter)
        self.is_getter  = isinstance(obj, Getter)  or isinstance(self, Getter)
        self.is_deleter = isinstance(obj, Deleter) or isinstance(self, Deleter)

        if isinstance(obj, (Setter, Getter, Deleter)):
            self.obj = obj.obj
        else:
            self.obj = obj

    def __ror__(self, other: Any) -> '_PropertyAccessModifierBase':
        return self.__class__(other)

class Setter(_PropertyAccessModifierBase):
    pass


class Getter(_PropertyAccessModifierBase):
    pass


class Deleter(_PropertyAccessModifierBase):
    pass

class _PropertyAccessModifierFactoryBase:
    def __init__(self, cls: type) -> None:
        self.cls = cls

    def __ror__(self, other: Any) -> _PropertyAccessModifierBase:
        return self.cls(other)

SET = _PropertyAccessModifierFactoryBase(Setter)
GET = _PropertyAccessModifierFactoryBase(Getter)
DEL = _PropertyAccessModifierFactoryBase(Deleter)

def property_access_mod_class(klass: type) -> type:
    old_init = klass.__init__

    def new_init(self, *args, **kwargs):
        old_init(self, *args, **kwargs)
        for k in dir(self):
            v = getattr(self, k)
            
            if issubclass(type(v), _PropertyAccessModifierBase):
                setter, getter, deleter = None, None, None
                setattr(self, f'_{k}', v.obj)
                if v.is_setter:
                    _k = k
                    setter = lambda obj, new: setattr(obj, f'_{_k}', new)
                
                if v.is_getter:
                    _k = k
                    getter = lambda obj: getattr(obj, f'_{_k}')
                
                if v.is_deleter:
                    _k = k
                    deleter = lambda obj: delattr(obj, f'_{_k}')

                setattr(klass, k, property(getter, setter, deleter, f"Autogenerated by {__package__} for {klass}.{k}."))

    klass.__init__ = new_init
    return klass